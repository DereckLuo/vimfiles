#!/usr/bin/env bash

FILES_TO_LINK="vimrc gvimrc"
LOCALS=".vimrc.local.before .vimrc.local .vimrc.local.plugins"

DIR=$(cd $(dirname $0) && pwd)

if [ "$DIR" != "$HOME/.vim" ]; then
  dot_file=$HOME/.vim
  if [ ! -e $dot_file ]; then
    echo "Detected clone outside of ~/.vim, symlinking"
    ln -s $DIR $dot_file
  fi
fi

pushd $DIR

if [ -e $DIR/bundle ]; then
  rm -rf $DIR/bundle
fi

git submodule update --init --recursive

for file in $LOCALS; do
  dot_file=$HOME/$file
  touch $dot_file
done

for file in $FILES_TO_LINK; do
  dot_file=$HOME/.$file
  if [ ! -e $dot_file ]; then
    ln -s $DIR/$file $dot_file
  fi
done

if [ "$(uname)" == "Darwin" ]; then
  VIM_UPDATE_PATH=/usr/local/bin/vim-update
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  VIM_UPDATE_PATH=$HOME/bin/vim-update
fi

if [ ! -e $VIM_UPDATE_PATH ]; then
  ln -s $DIR/update $VIM_UPDATE_PATH
fi

green='\e[0;32m'
yellow='\e[0;33m'
bold=`tput bold`
normal=`tput sgr0`
end_color='\e[0m'

if which go > /dev/null; then
  echo -e "${yellow}INSTALL${end_color} ${bold}golang${normal} dependencies..."
  gopackages="\
    github.com/golang/lint/golint \
    github.com/jstemmer/gotags \
    github.com/kisielk/errcheck \
    github.com/nsf/gocode \
    golang.org/x/tools/cmd/godoc \
    golang.org/x/tools/cmd/goimports \
    golang.org/x/tools/cmd/gorename \
    golang.org/x/tools/cmd/oracle \
    golang.org/x/tools/cmd/vet \
    "

  for p in $gopackages; do
    (
      echo -e "\t${yellow}INSTALL${end_color} ${bold}${p}${normal}..."
      go get -f -u $p
      echo -e "\t${green}DONE${end_color}    ${bold}${p}${normal}"
    ) &
  done
  wait
  echo -e "${green}DONE${end_color}    ${bold}golang${normal} dependencies"
fi

vim +'silent! PlugClean!' +qall
vim +'silent! PlugUpdate' +qall

popd
